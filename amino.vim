" amino.vim colour scheme by Stochastica
" Supports 16-coloured, 256-coloured, and GUI.

" Cleanup
set background=dark
highlight clear
if exists("syntax_on")
	syntax reset
endif

" Global variable for colour name, the rest are all local
let g:colors_name = "amino"

" If encoding is UTF-8, use special characters for space and newline
if &encoding == "utf-8"
	set listchars=eol:¬,tab:➝\ ,trail:·,space:␣
	set list
endif

" g = gui, t = terminal
let s:cg_foreground='#C8C8C8' " Light grey, not fully white
let s:cg_background='#1E1E1E' " Dark grey, not fully black
let s:cg_lineNum='#898D8E' " Grey
let s:cg_activeLineNum='#FFEE62' " Yellow
let s:cg_activeLineBG='#2E2E2E' " Disabled
let s:cg_nonText='#585858' " Grey, used when tabs are shown explicitly
let s:cg_pMenuBG='#5F5F87'
let s:cg_pMenuFG=s:cg_foreground
let s:cg_pMenuSelected='#FF5F00' " Orange
let s:cg_matchParen='#FFEE62' " Yellow

let s:cg_comment='#93C763' " Green/Lime
let s:cg_constant='#ECBD3D' " Yellow
let s:cg_identifier='#A8A8A8' " Lighter grey than preprocessor
let s:cg_preprocessor='#808080' " Grey
let s:cg_preprocMacro='#BD63C5' " Magenta
let s:cg_variable='#D28408' " Orange
let s:cg_method='#DFDFFF'
let s:cg_special='#56B6C2' " Cyan
let s:cg_statement='#569CD6' " Blue
let s:cg_label='#FEFE55' " Yellow
let s:cg_string='#55BE67' " Mild green
let s:cg_type='#55FE55' " Green
let s:cg_conceal=s:cg_variable
let s:cg_enumConst=s:cg_preprocMacro
let s:cg_syntaxError='#AF0000' " Dark red
let s:cg_syntaxWarning='#AF8700' " Yellow

"let s:cg_annotation='#1AB166' " Orange
let s:cg_annotation='#E1AE48' " Orange

" Tex
let s:cg_tex=s:cg_foreground
let s:cg_tex_section=s:cg_preprocMacro
let s:cg_tex_statement=s:cg_statement
let s:cg_tex_beginEndName=s:cg_constant
let s:cg_vim_option=s:cg_preprocMacro

" Plugin based
let s:cg_cANSI='#AA63A4' " Magenta

" The following are generated by a script
if &t_Co == 256 " 256 colour xterm
	let s:ct_foreground='251'
	let s:ct_background='234'
	let s:ct_lineNum='245'
	let s:ct_activeLineNum='227'
	let s:ct_activeLineBG='236'
	let s:ct_nonText='240'
	let s:ct_pMenuBG='60'
	let s:ct_pMenuFG=s:ct_foreground
	let s:ct_pMenuSelected='202'
	let s:ct_matchParen='245'

	let s:ct_comment='113'
	let s:ct_constant='215'
	let s:ct_identifier='248'
	let s:ct_preprocessor='244'
	let s:ct_preprocMacro='134'
	let s:ct_variable='172'
	let s:ct_method='189'
	let s:ct_special='73'
	let s:ct_statement='74'
	let s:ct_label='227'
	let s:ct_string='71'
	let s:ct_type='83'
	let s:ct_conceal=s:ct_variable
	let s:ct_enumConst=s:ct_preprocMacro
	let s:ct_syntaxError='124'
	let s:ct_syntaxWarning='136'

	let s:ct_annotation='179' "'35'

	let s:ct_tex=s:ct_foreground
	let s:ct_tex_section=s:ct_preprocMacro
	let s:ct_tex_statement=s:ct_statement
	let s:ct_tex_beginEndName=s:ct_constant

	let s:ct_vim_option=s:ct_preprocMacro

else " 16 colour
	let s:ct_foreground='White'
	let s:ct_background='Black'
	let s:ct_lineNum='DarkGrey'
	let s:ct_activeLineNum='Yellow'
	let s:ct_activeLineBG='Black'
	let s:ct_nonText='DarkGrey'
	let s:ct_pMenuBG='DarkGrey'
	let s:ct_pMenuFG=s:ct_foreground
	let s:ct_pMenuSelected='Yellow'
	let s:ct_matchParen='Yellow'

	let s:ct_comment='Green'
	let s:ct_constant='Yellow'
	let s:ct_identifier='Grey'
	let s:ct_preprocessor='DarkGrey'
	let s:ct_preprocMacro='Magenta'
	let s:ct_variable='DarkYellow'
	let s:ct_method='White'
	let s:ct_special='Cyan'
	let s:ct_statement='Blue'
	let s:ct_label='Yellow'
	let s:ct_string='DarkGreen'
	let s:ct_type='Blue'
	let s:ct_conceal=s:ct_variable
	let s:ct_enumConst=s:ct_preprocMacro
	let s:ct_syntaxError='DarkRed'
	let s:ct_syntaxWarning='DarkYellow'

	let s:ct_annotation='DarkYellow'

	let s:ct_tex=s:ct_foreground
	let s:ct_tex_section=s:ct_preprocMacro
	let s:ct_tex_statement=s:ct_statement
	let s:ct_tex_beginEndName=s:ct_constant

	let s:ct_vim_option=s:ct_preprocMacro

	let s:ct_cANSI='Magenta'
endif

" Base
if has('gui_running') " Enables background
	exe 'hi Normal cterm=none gui=none ctermfg='.s:ct_foreground
		\.' guifg='.s:cg_foreground
		\.' ctermbg='.s:ct_background
		\.' guibg='.s:cg_background
else " Disable background in terminal mode
	exe 'hi Normal term=none cterm=none gui=none ctermfg='.s:ct_foreground
		\.' guifg='.s:cg_foreground
		\.' ctermbg=none'
endif
exe 'hi LineNr ctermfg='.s:ct_lineNum.' guifg='.s:cg_lineNum
exe 'hi CursorLineNR term=bold cterm=bold gui=bold ctermfg='.s:ct_activeLineNum
	\.' guifg='.s:cg_activeLineNum
hi clear CursorLine
hi CursorLine term=underline cterm=underline gui=underline
"exe 'hi CursorLine ctermbg='.s:ct_activeLineBG.' guibg='.s:cg_activeLineBG
exe 'hi SpecialKey ctermfg='.s:ct_nonText.' guifg='.s:cg_nonText
exe 'hi NonText ctermfg='.s:ct_nonText.' guifg='.s:cg_nonText
exe 'hi pMenu ctermfg='.s:ct_pMenuFG.' ctermbg='.s:ct_pMenuBG
	\.' guifg='.s:cg_pMenuFG.' guibg='.s:cg_pMenuBG
exe 'hi pMenuSel ctermfg='.s:ct_pMenuSelected.' ctermbg='.s:ct_pMenuBG
	\.' guifg='.s:cg_pMenuSelected.' guibg='.s:cg_pMenuBG
hi clear MatchParen
exe 'hi MatchParen term=bold cterm=bold gui=bold ctermfg='.s:ct_matchParen
	\.' guifg='.s:cg_matchParen

" Highlighting
exe 'hi Comment ctermfg='.s:ct_comment.' guifg='.s:cg_comment
exe 'hi Constant ctermfg='.s:ct_constant.' guifg='.s:cg_constant
exe 'hi Identifier ctermfg='.s:ct_identifier.' guifg='.s:cg_identifier
exe 'hi PreProc ctermfg='.s:ct_preprocessor.' guifg='.s:cg_preprocessor
exe 'hi Macro ctermfg='.s:ct_preprocMacro.' guifg='.s:cg_preprocMacro
exe 'hi Variable cterm=bold gui=bold ctermfg='.s:ct_variable
	\.' guifg='.s:cg_variable
exe 'hi Member cterm=none gui=none ctermfg='.s:ct_foreground
	\.' guifg='.s:cg_foreground
exe 'hi FieldDecl cterm=italic gui=italic ctermfg='.s:ct_variable
	\.' guifg='.s:cg_variable
exe 'hi Special ctermfg='.s:ct_special.' guifg='.s:cg_special
exe 'hi Statement cterm=none gui=none ctermfg='.s:ct_statement
	\.' guifg='.s:cg_statement
highlight link StorageClass Statement
highlight link Structure Statement
highlight link Typedef Statement
highlight link EnumConstant Constant
exe 'hi Repeat cterm=bold gui=bold ctermfg='.s:ct_statement
	\.' guifg='.s:cg_statement
highlight link cRepeat Repeat
exe 'hi Label ctermfg='.s:ct_label.' guifg='.s:cg_label
exe 'hi String ctermfg='.s:ct_string.' guifg='.s:cg_string
exe 'hi Type cterm=none gui=none ctermfg='.s:ct_type.' guifg='.s:cg_type
exe 'hi Error ctermbg='.s:ct_syntaxError.' guibg='.s:cg_syntaxError

exe 'hi Annotation term=bold cterm=bold gui=bold ctermfg='.s:ct_annotation.' guifg='.s:cg_annotation

" Tex
exe 'hi texMath ctermfg='.s:ct_tex.' guifg='.s:cg_tex
exe 'hi texStatement ctermfg='.s:ct_tex_statement.' guifg='.s:cg_tex_statement
exe 'hi texGreek cterm=italic gui=italic ctermfg='.s:ct_tex_statement.' guifg='.s:cg_tex_statement
highlight link texSuperscript texMath
highlight link texSuperscripts texMath
highlight link texSubscript texMath
highlight link texSubscripts texMath
exe 'hi texSection ctermfg='.s:ct_tex_section.' guifg='.s:cg_tex_section
exe 'hi texBeginEndName ctermfg='.s:ct_tex_beginEndName.' guifg='.s:cg_tex_beginEndName
exe 'hi Conceal cterm=none gui=none ctermbg='.s:ct_background
	\.' guibg='.s:cg_background.' ctermfg='.s:ct_conceal.' guifg='.s:cg_conceal

" Vim
exe 'hi vimOption ctermfg='.s:ct_vim_option.' guifg='.s:cg_vim_option

" Plugins
"
highlight link cppModifier Statement
exe 'hi CXXMethod cterm=italic, gui=italic ctermfg='.s:ct_method
	\.' guifg='.s:cg_method
highlight link Constructor CXXMethod
highlight link Destructor CXXMethod
highlight link ConversionFunction CXXMethod
exe 'hi YcmWarningSign ctermbg='.s:ct_syntaxWarning
	\.' guibg='.s:cg_syntaxWarning
